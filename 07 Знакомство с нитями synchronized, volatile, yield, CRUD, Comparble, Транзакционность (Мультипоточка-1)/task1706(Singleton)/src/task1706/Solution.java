package task1706;

/* 
Синхронизированный президент
И снова Singleton паттерн - синхронизация в статическом блоке.
Внутри класса OurPresident в статическом блоке создай синхронизированный блок.
Внутри синхронизированного блока инициализируй president.


Requirements:
1. Класс OurPresident должен содержать приватное статическое поле OurPresident president.
2. Класс OurPresident должен содержать публичный статический метод OurPresident getOurPresident().
3. Класс OurPresident должен содержать приватный конструктор.
4. Класс OurPresident должен содержать статический блок.
5. Внутри статического блока класса OurPresident должен быть синхронизированный блок.
6. Внутри синхронизированного блока должно быть проинициализировано поле president.*/

public class Solution {
    public static void main(String[] args) {
        OurPresident expectedPresident = OurPresident.getOurPresident();
        OurPresident ourPresident = OurPresident.getOurPresident();
        System.out.println(expectedPresident == ourPresident);
    }
}


/*
Для реализации шаблона Singleton с использованием синхронизации в статическом блоке,
необходимо добавить синхронизированный блок в статический блок инициализации внутри класса OurPresident.
Это позволит обеспечить, что объект president будет создан только один раз и безопасно в многопоточном окружении.

Объяснение:
Приватное поле president: Поле president хранит единственный экземпляр класса.
Приватный конструктор: Это предотвращает создание объекта вне класса.
Метод getOurPresident(): Возвращает единственный экземпляр president.
Статический блок с синхронизацией: В этом блоке мы синхронизируем создание экземпляра president на классе OurPresident.
Это гарантирует, что даже если несколько потоков попытаются инициализировать объект одновременно, объект будет создан только один раз.
Проверка на null внутри синхронизированного блока: Мы проверяем, был ли уже создан объект, чтобы избежать его повторной инициализации.
Важно:
Внутри статического блока используется synchronized для гарантии, что объект создается только один раз, даже при многопоточном доступе.
 */