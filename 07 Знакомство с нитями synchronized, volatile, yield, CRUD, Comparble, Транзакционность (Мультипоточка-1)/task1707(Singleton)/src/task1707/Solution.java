package task1707;

/* 
МВФ
Singleton паттерн - синхронизация в методе.
Класс IMF - это Международный Валютный Фонд.
Внутри метода getFund создай синхронизированный блок.
Внутри синхронизированного блока инициализируй поле imf так, чтобы метод getFund всегда возвращал один и тот же объект.


Requirements:
1. Класс IMF должен содержать приватное статическое поле IMF imf.
2. Класс IMF должен содержать приватный конструктор.
3. Класс IMF должен содержать публичный статический метод IMF getFund().
4. Метод getFund() должен содержать синхронизированный блок.
5. Внутри синхронизированного блока должно быть проинициализировано поле imf.
6. Метод getFund() должен всегда возвращать один и тот же объект.
*/

public class Solution {
    public static void main(String[] args) {
        IMF fund = IMF.getFund();
        IMF anotherFund = IMF.getFund();
        System.out.println(fund == anotherFund);
    }
}





/*
Для реализации шаблона Singleton с синхронизацией в методе, нам нужно добавить синхронизированный
блок в метод getFund() класса IMF. Этот блок обеспечит, что объект imf будет создан только один раз,
даже если несколько потоков одновременно вызовут этот метод.

Объяснение:
Поле imf: Это приватное статическое поле хранит единственный экземпляр класса IMF.
Метод getFund(): Это публичный метод, который возвращает объект imf.
Он содержит двойную проверку if (imf == null) для того, чтобы минимизировать синхронизацию
(проверка вне синхронизированного блока позволяет избежать синхронизации на каждом вызове метода).
Синхронизированный блок: Мы используем синхронизированный блок на классе IMF, чтобы гарантировать,
что объект imf будет создан только один раз даже при параллельных вызовах метода несколькими потоками.
Двойная проверка: Мы дважды проверяем, равен ли imf значению null — до и внутри синхронизированного блока.
Это обеспечивает создание объекта только в случае необходимости и уменьшает затраты на синхронизацию.
Теперь метод getFund() всегда возвращает один и тот же объект,
даже если несколько потоков пытаются создать его одновременно.
 */
