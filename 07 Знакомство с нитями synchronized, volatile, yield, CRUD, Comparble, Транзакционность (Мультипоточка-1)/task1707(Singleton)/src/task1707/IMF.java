package task1707;


public class IMF {

    private static IMF imf;

    public static IMF getFund() {
        // проверку на null выполним дважды для реализации "Double-Checked Locking" (двойная проверка блокировки). Этот подход применяется для того, чтобы минимизировать накладные расходы, связанные с синхронизацией, и при этом обеспечить потокобезопасность в многопоточной среде.
        if (imf == null) { // Если объект уже создан, нет необходимости блокировать доступ к методу. Убираем накладных расходы на синхронизацию при каждом вызове метода (блокировка не нужна в большинстве случаев).
            synchronized(IMF.class) {
                if (imf == null) { // Нужно снова проверить, не был ли объект уже создан другим потоком до этого момента. Без этой второй проверки объект может быть создан несколько раз, если несколько потоков одновременно пройдут первую проверку, но ещё не достигли блокировки. Вторая проверка гарантирует, что объект создаётся только один раз.
                    imf = new IMF();
                }
            }
        }
        return imf;
    }

    private IMF() {
    }
}
